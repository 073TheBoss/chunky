apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'signing'

mainClassName = 'se.llbit.chunky.main.Chunky'
archivesBaseName = 'chunky-core'

jar {
	// Include classes from the common library.
	from project(':lib').configurations.archives.allArtifacts.files.collect {
		zipTree(it)
	}
	manifest {
		attributes("Main-Class": mainClassName)
	}
}

sourceSets {
	main {
		java {
			srcDir 'src/java'
			srcDir 'src/gen'
		}
		resources {
			srcDir 'src/gen-res'
			srcDir 'src/res'
		}
	}
	test {
		java {
			srcDir 'src/test'
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compile 'org.apache.commons:commons-math3:3.2'
	compile project(':lib')

	testCompile 'com.google.truth:truth:0.30'
	testCompile 'junit:junit:4.12'
}

processResources.dependsOn 'updateVersionString'

task updateVersionString {
	description 'Store the current version string in src/gen-res/Version.properties'

	outputs.upToDateWhen {
		def props = new Properties()
		def output = file('src/gen-res/Version.properties')
		if (output.isFile()) {
			output.withInputStream { stream -> props.load(stream) }
		}
		props['version'] == project.version
	}

	doLast {
		file('src/gen-res').mkdirs()
		def date = new Date()
		def versionFile = file('src/gen-res/Version.properties')
		ant.propertyfile(file: versionFile) {
			entry(key: 'version', value: project.version)
		}
	}
}

compileJava.dependsOn 'generateJava'

task generateJava() {
	inputs.dir 'src/jastadd'
	outputs.dir 'src/gen'

	doLast {
		project.file('src/gen').mkdirs()
		ant.taskdef(
			name: 'jastadd',
			classname: 'org.jastadd.JastAddTask',
			classpath: project.configurations.jastadd.asPath)
		ant.jastadd(
			outdir: project.file('src/gen'),
			package: 'se.llbit.nbt',
			rewrite: 'none',
			visitCheck: false,
			debug: false) {
			fileset(dir: project.file('src/jastadd')) {
				include(name: '*.ast')
				include(name: '*.jrag')
				include(name: '*.jadd')
			}
		}
	}
}

task chunkyJavadoc(type: Javadoc) {
	exclude 'src/gen/**'
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from chunkyJavadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

signing {
	// Require OSSRH credentials before signing artifacts:
	required { project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword') }
	sign configurations.archives
}

uploadArchives {
	repositories.mavenDeployer {
		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

		repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
			if (project.hasProperty('ossrhUsername')) {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}
		}

		snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
			if (project.hasProperty('ossrhUsername')) {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}
		}

		pom.project {
			name 'Chunky'
			packaging 'jar'
			description 'Minecraft mapping and rendering tool'
			url 'http://chunky.llbit.se'
			licenses {
				license {
					name 'GNU General Public License Version 3 (GPLv3)'
					url 'https://www.gnu.org/licenses/gpl-3.0.en.html'
					distribution 'repo'
				}
			}
			developers {
				developer {
					name 'Jesper Ã–qvist'
					email 'jesper@llbit.se'
				}
			}
			scm {
				connection 'scm:git:https://github.com/llbit/chunky.git'
				url 'https://github.com/llbit/chunky'
			}
		}
	}
}

project.afterEvaluate {
	def installers = project.tasks.install.repositories
	def deployers = project.tasks.uploadArchives.repositories
	installers.plus(deployers)*.pom*.whenConfigured {pom ->
		// Exclude the :lib dependency since we embed it in the Jar.
		pom.dependencies.removeAll { it.groupId == 'se.llbit' && it.artifactId == 'lib' }

		// Change POM version to -SNAPSHOT for intermediate builds.
		if (project.version =~ /\d+\.\d+(\.\d+)?-.+/) {
			// This is a SNAPSHOT build.
			def match = (project.version =~ /(\d+\.\d+(\.\d+)?)-.+/)
			pom.version = "${match[0][1]}-SNAPSHOT"
		}
		println("POM version: ${pom.version}")
	}
}
