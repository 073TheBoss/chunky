/**
 * Copyright (c) 2010 Jesper Öqvist <jesper@llbit.se>
 *
 * This file is part of Chunky.
 *
 * Chunky is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Chunky is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with Chunky.  If not, see <http://www.gnu.org/licenses/>.
 */
 
aspect DumpTree {
	syn String ASTNode.dumpTree() {
		StringBuffer buff = new StringBuffer(4096);
		buff = dumpTree(buff, "");
		return buff.toString();
	}

	syn StringBuffer ASTNode.dumpTree(StringBuffer buff) {
		buff.append(name() + extraInfo());
		buff.append('\n');
		return buff;
	}

	syn StringBuffer List.dumpTree(StringBuffer buff, String indent) {
		for (int i = 0; i < getNumChild(); ++i) {
			buff = getChild(i).dumpTree(buff, indent);
		}
		return buff;
	}

	syn StringBuffer ASTNode.dumpTree(StringBuffer buff, String indent) {
		buff.append(indent);
		buff = dumpTree(buff);
		for (int i = 0; i < getNumChild(); ++i) {
			buff = getChild(i).dumpTree(buff, indent+"  ");
		}
		return buff;
	}

	syn String ASTNode.name();
	eq ASTNode.name() = "AST.Node";
	eq List.name() = "AST.List";
	eq Tag.name() = "Tag";
	eq AnyTag.name() = type();

	syn String ASTNode.extraInfo() = "";
	eq ErrorTag.extraInfo() = ": \""+getError()+'"';
	eq ByteTag.extraInfo() = ": "+getData();
	eq ShortTag.extraInfo() = ": "+getData();
	eq IntTag.extraInfo() = ": "+getData();
	eq LongTag.extraInfo() = ": "+getData();
	eq FloatTag.extraInfo() = ": "+getData();
	eq DoubleTag.extraInfo() = ": "+getData();
	eq ByteArrayTag.extraInfo() = ": "+getData().length;
	eq StringTag.extraInfo() = ": \""+getData()+'"';
}

aspect ToString {

	syn String AnyTag.toString() = type()+extraInfo();
	eq CompoundTag.toString() = type()+":\n"+dumpTree();
	eq ListTag.toString() = type()+":\n"+dumpTree();

	syn String Tag.type();

	eq Tag.type() = "Tag.Tag";
	eq ErrorTag.type() = "Tag.Error";
	eq NamedTag.type() = "Tag.Named";

	eq EndTag.type() = "TAG_End";
	eq ByteTag.type() = "TAG_Byte";
	eq ShortTag.type() = "TAG_Short";
	eq IntTag.type() = "TAG_Int";
	eq LongTag.type() = "TAG_Long";
	eq FloatTag.type() = "TAG_Float";
	eq DoubleTag.type() = "TAG_Double";
	eq ByteArrayTag.type() = "TAG_Byte_Array";
	eq StringTag.type() = "TAG_String";
	eq ListTag.type() = "TAG_List";
	eq CompoundTag.type() = "TAG_Compound";
}

