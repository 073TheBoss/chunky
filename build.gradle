version = getVersion()

println "Building version ${version}"

allprojects {

	apply plugin: 'java'

	group = 'se.llbit.chunky'
	version = rootProject.version

	sourceCompatibility = '1.6'
	targetCompatibility = '1.6'

	/*tasks.withType(Compile) {
		options.encoding = 'UTF-8'
	}*/

	repositories {
		mavenCentral()
	}

	configurations {
		jastadd
	}

	dependencies {
		jastadd 'org.jastadd:jastadd:2.1.13'
	}
}

task tarball(type: Exec) {
	// TODO(jesper): Prepend cmd /c on Windows?
	commandLine "git archive --prefix=\"chunky-${version}\" -o build/chunky-${version}.tar.gz master".split(' ')
}

task release << {
	tryCommand([ 'git', 'commit', '-m', "Release ${version}", 'chunky/src/res/Version.properties' ], true)
	tryCommand([ 'git', 'tag', '-a', "${version}", '-m', "Version ${version}" ], true)
}

task releaseJar(type: JavaExec) {
	dependsOn 'copyArtifacts'

	description 'Writes build/chunky-VERSION.jar, latest.json and updates chunky-core-VERSION.jar/version.json'
	classpath = project(':releasetools').sourceSets.main.runtimeClasspath
	main = 'releasetools.ReleaseBuilder'
	args "${version}", "release_notes-${version}.txt"
}

task releaseZip(type: Zip) {
	dependsOn 'copyArtifacts'

	destinationDir = buildDir
	archiveName = "Chunky-${version}.zip"

	from(buildDir) {
		include "chunky-${version}.jar"
		include "ReadMe.html"
		include "release_notes-${version}.txt"
	}
	from(projectDir) {
		include 'license/*'
	}
	rename("release_notes-${version}.jar", 'chunky.jar')
}

task nsi(type: Copy) {
	from('dist') {
		include 'Chunky.nsi'
	}
	into project.projectDir
	filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
		VERSION: "${version}".toString()
	])
}

task documentation {
	inputs.files 'README.md'
	outputs.files 'build/ReadMe.html'

	doLast {
		def readme = tryCommand([ 'perl', file('tools/Markdown.pl').path, file('README.md').path ], true)
		file('build/ReadMe.html').write(readme)
	}
}

task copyArtifacts(type: Copy) {
	dependsOn subprojects.jar
	from subprojects.jar
	into buildDir
}

/** Helper function to run a command. Returns the command output if the command succeeded. */
def tryCommand(def command, boolean failOnError = false) {
	def out = new StringBuilder()
	def err = new StringBuilder()
	def proc = command.execute()
	proc.waitForProcessOutput(out, err)
	if (proc.exitValue()) {
		def msg = "failed to run '${command[0]}' command (args: ${command.tail()})\n$err$out"
		if (failOnError) {
			throw new GradleException(msg)
		} else {
			print 'Warning: '
			println msg
		}
		""
	} else {
		if (err) println "${err}"
		out.toString()
	}
}

/** Helper function to retrieve the current version string. */
def getVersion() {
	if (hasProperty('newVersion')) {
		// A new version string should be saved.
		def date = new Date()
		Properties version = new Properties()
		version['version'] = newVersion
		version.store(file('chunky/src/res/Version.properties').newWriter(), null)
		return newVersion
	} else {
		def output = tryCommand(['git', 'describe'])
		if (output) {
			// Use Git describe output.
			output.readLines()[0]
		} else {
			// Git command failed. Read the previous version string instead.
			Properties version = new Properties()
			version.load(new FileInputStream(file('chunky/src/res/Version.properties')))
			version['version']
		}
	}
}

task macDist(dependsOn: 'releaseJar') << {
	buildDir.mkdirs()

	// TODO(jesper): Add support for Mac build on Linux.
	ant.taskdef(name: 'appbundler', classpath: file('tools/appbundler-1.0.jar'),
		classname: 'com.oracle.appbundler.AppBundlerTask')
	ant.appbundler(outputdirectory: buildDir,
		name: 'Chunky',
		displayname: 'Chunky',
		identifier: 'se.llbit.Chunky',
		shortversion: "${version}",
		mainclassname: 'se.llbit.chunky.launcher.ChunkyLauncher',
		icon: file('dist/Chunky.icns').path) {
		option(value: '-Dapple.laf.useScreenMenuBar=true')
		option(value: '-Dapple.awt.textantialiasing=true')
		classpath(file: file("build/chunky-${version}.jar").path)
	}
	tryCommand([ '/usr/bin/hdiutil',
		'create',
		'-srcfolder',
		file('build/Chunky.app').path,
		'-volname', 'Chunky', '-ov',
		file('build/Chunky-tmp.dmg').path,
		'-format', 'UDRW' ], true)
	tryCommand([ '/usr/bin/hdiutil',
		'attach',
		file('build/Chunky-tmp.dmg').path,
		'-mountroot',
		'/tmp' ], true)
	new File('/tmp/Chunky/.background').mkdirs()
	ant.copy(file: file('dist/chunky-dmg.png'),
		tofile: '/tmp/Chunky/.background/background.png',
		overwrite: true)
	ant.copy(file: file('dist/Chunky.icns'),
		tofile: '/tmp/Chunky/.VolumeIcon.icns',
		overwrite: true)
	ant.copy(file: file('dist/DS_Store'),
		tofile: '/tmp/Chunky/.DS_Store',
		overwrite: true)
	tryCommand('/usr/bin/Setfile -a C /tmp/Chunky'.split(' '), true)
	ant.symlink(link: '/tmp/Chunky', resource: '/Applications')
	tryCommand('/usr/bin/hdiutil detach /tmp/Chunky'.split(' '), true)
	file("build/Chunky-${version}.dmg").delete()
	tryCommand([ '/usr/bin/hdiutil',
		'convert',
		file('build/Chunky-tmp.dmg').path,
		'-format',
		'UDZO',
		'-o',
		file("build/Chunky-${version}.dmg").path ], true)
	file('build/Chunky-tmp.dmg').delete()
	tryCommand([ '/usr/bin/hdiutil',
		'internet-enable',
		'-yes',
		file("build/Chunky-${version}.dmg") ], true)
}
